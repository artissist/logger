// Generated TypeScript types from Smithy models
// This file is automatically generated. Do not edit directly.

// Document type for arbitrary JSON data
export type Document = unknown;

export enum LogLevel {
  /** Detailed tracing information for debugging */
  TRACE = 'TRACE',
  /** General debugging information   */
  DEBUG = 'DEBUG',
  /** Informational messages during normal operations */
  INFO = 'INFO',
  /** Warning conditions that should be addressed */
  WARN = 'WARN',
  /** Error conditions that require attention */
  ERROR = 'ERROR',
  /** Critical failures that may cause system shutdown */
  FATAL = 'FATAL',
}

export enum LogEvent {
  /** System startup or initialization events */
  SYSTEM_START = 'SYSTEM_START',
  /** System shutdown or termination events */
  SYSTEM_STOP = 'SYSTEM_STOP',
  /** User authentication events */
  USER_AUTH = 'USER_AUTH',
  /** Authorization and permission events */
  USER_AUTHZ = 'USER_AUTHZ',
  /** Project lifecycle events */
  PROJECT_LIFECYCLE = 'PROJECT_LIFECYCLE',
  /** Database operations */
  DATABASE_OPERATION = 'DATABASE_OPERATION',
  /** API request/response events */
  API_REQUEST = 'API_REQUEST',
  /** Performance metrics and timing */
  PERFORMANCE_METRIC = 'PERFORMANCE_METRIC',
  /** Error conditions and exceptions */
  ERROR_OCCURRED = 'ERROR_OCCURRED',
  /** Warning conditions */
  WARNING_ISSUED = 'WARNING_ISSUED',
  /** Configuration changes */
  CONFIG_CHANGE = 'CONFIG_CHANGE',
  /** Analytics and tracking events */
  ANALYTICS_EVENT = 'ANALYTICS_EVENT',
  /** Agent processing events */
  AGENT_PROCESSING = 'AGENT_PROCESSING',
  /** Conversation and interaction events */
  CONVERSATION_EVENT = 'CONVERSATION_EVENT',
  /** Asset upload and processing */
  ASSET_PROCESSING = 'ASSET_PROCESSING',
  /** Inspiration capture events */
  INSPIRATION_EVENT = 'INSPIRATION_EVENT',
  /** Infrastructure deployment events */
  INFRASTRUCTURE_DEPLOY = 'INFRASTRUCTURE_DEPLOY',
  /** Business metric events */
  BUSINESS_METRIC = 'BUSINESS_METRIC',
  /** Search and discovery events */
  SEARCH_OPERATION = 'SEARCH_OPERATION',
  /** Background job processing */
  BACKGROUND_JOB = 'BACKGROUND_JOB',
  /** Notification events */
  NOTIFICATION_SENT = 'NOTIFICATION_SENT',
  /** Security-related events */
  SECURITY_EVENT = 'SECURITY_EVENT',
  /** Scheduled task execution */
  SCHEDULED_TASK = 'SCHEDULED_TASK',
  /** External service integration */
  EXTERNAL_SERVICE = 'EXTERNAL_SERVICE',
  /** Audit trail events */
  AUDIT_TRAIL = 'AUDIT_TRAIL',
}

export type ServiceName = string;

export type Environment = string;

export type LogId = string;

export type UserId = string;

export type SessionId = string;

export type RequestId = string;

export type Timestamp = Date | string;

export enum TimestampFormat {
  /** ISO 8601 format (2024-01-01T12:00:00.000Z) */
  ISO = 'iso',
  /** Short format (12:00:00) */
  SHORT = 'short',
  /** Relative format (2m ago) */
  RELATIVE = 'relative',
  /** No timestamp */
  NONE = 'none',
}

export enum AdapterName {
  /** Console/stdout adapter */
  CONSOLE = 'console',
  /** File system adapter */
  FILE = 'file',
  /** Browser console adapter */
  BROWSER = 'browser',
  /** Browser localStorage adapter */
  LOCAL_STORAGE = 'localStorage',
}

export type LogEntryList = LogEntry[];

export type LogIdList = LogId[];

export type FailedLogEntryList = FailedLogEntry[];

export type AdapterNameList = AdapterName[];

export type TagMap = Record<string, string>;

export type MetricsMap = Record<string, number>;

export type CustomEventMap = Record<string, EmojiMapping>;

export type EmojiMappingMap = Record<string, EmojiMapping>;

export interface AWSContext {
  /** AWS region */
  region?: string | null;
  /** AWS account ID */
  accountId?: string | null;
  /** Resource ARN if applicable */
  resourceArn?: string | null;
  /** CloudFormation stack name */
  stackName?: string | null;
  /** Lambda function name */
  functionName?: string | null;
  /** Lambda request ID */
  lambdaRequestId?: string | null;
  /** EC2 instance ID */
  instanceId?: string | null;
  /** ECS cluster and task information */
  ecsInfo?: ECSInfo | null;
}

export interface AgentLogEntry {
  /** Base log entry fields */
  baseEntry: LogEntry;
  /** Agent-specific identifier */
  agentId: string;
  /** Agent type (observation, conversation, etc.) */
  agentType?: string | null;
  /** Observation context if applicable */
  observationContext?: ObservationContext | null;
  /** Tool execution context */
  toolContext?: ToolExecutionContext | null;
}

export interface AgentLoggerConfig {
  /** Agent identifier */
  agentId: string;
  /** Agent type (observation, conversation, etc.) */
  agentType?: string | null;
  /** Environment name */
  environment?: Environment | null;
  /** Enable emojis */
  emojis?: boolean | null;
  /** Additional context */
  context?: LoggingContext | null;
  /** Adapters to use */
  adapters?: AdapterNameList | null;
  /** Log level */
  level?: LogLevel | null;
}

export interface BrowserAdapterConfig {
  /** Enable colored console output */
  enableColors?: boolean | null;
  /** Enable emoji prefixes */
  enableEmojis?: boolean | null;
  /** Timestamp format */
  timestampFormat?: TimestampFormat | null;
  /** Minimum log level */
  logLevel?: LogLevel | null;
  /** Use console.error for error levels */
  useConsoleError?: boolean | null;
}

export interface ClientInfo {
  /** User agent string */
  userAgent?: string | null;
  /** Browser name and version */
  browser?: string | null;
  /** Operating system information */
  os?: string | null;
  /** Screen resolution */
  screenResolution?: string | null;
  /** Viewport dimensions */
  viewportSize?: string | null;
  /** Device type (mobile, tablet, desktop) */
  deviceType?: string | null;
  /** Network connection type */
  connectionType?: string | null;
  /** Timezone of the client */
  timezone?: string | null;
}

export interface ConsoleAdapterConfig {
  /** Enable colored output */
  enableColors?: boolean | null;
  /** Enable emoji prefixes */
  enableEmojis?: boolean | null;
  /** Timestamp format */
  timestampFormat?: TimestampFormat | null;
  /** Minimum log level */
  logLevel?: LogLevel | null;
  /** Use stderr instead of stdout for output */
  useStderr?: boolean | null;
}

export interface CoordinateInfo {
  /** X coordinate */
  x?: number | null;
  /** Y coordinate   */
  y?: number | null;
  /** Element-relative X coordinate */
  relativeX?: number | null;
  /** Element-relative Y coordinate */
  relativeY?: number | null;
}

export interface CostImpact {
  /** Estimated monthly cost change in USD */
  monthlyCostChangeUSD?: number | null;
  /** Currency code */
  currency?: string | null;
  /** Cost calculation confidence */
  confidence?: number | null;
  /** Breakdown by resource type */
  resourceCostBreakdown?: Document;
}

export interface CreateBatchLogEntriesRequest {
  logEntries: LogEntryList;
}

export interface CreateBatchLogEntriesResponse {
  processedCount: number;
  successfulIds: LogIdList;
  failedEntries?: FailedLogEntryList | null;
}

export interface CreateLogEntryRequest {
  logEntry: LogEntry;
}

export interface CreateLogEntryResponse {
  logId: LogId;
  timestamp: Timestamp;
  status?: string | null;
}

export interface DefaultEmojiMappings {
  /** Mapping from log events to emoji configurations */
  mappings: EmojiMappingMap;
}

export interface DeploymentContext {
  /** Deployment identifier */
  deploymentId?: string | null;
  /** Deployment stage (plan, apply, destroy) */
  deploymentStage?: string | null;
  /** Infrastructure as code tool (CDK, Terraform, etc.) */
  iacTool?: string | null;
  /** Tool version */
  toolVersion?: string | null;
  /** Target environment */
  targetEnvironment?: string | null;
  /** Deployment trigger (manual, automated, scheduled) */
  trigger?: string | null;
  /** Git commit hash if applicable */
  commitHash?: string | null;
  /** Git branch name */
  branch?: string | null;
}

export interface ECSInfo {
  /** ECS cluster name */
  clusterName?: string | null;
  /** ECS task ARN */
  taskArn?: string | null;
  /** ECS service name */
  serviceName?: string | null;
  /** ECS task definition family */
  taskDefinitionFamily?: string | null;
  /** ECS task definition revision */
  taskDefinitionRevision?: string | null;
}

export interface EmojiMapping {
  /** Unicode emoji character */
  emoji: string;
  /** Human-readable description of the event */
  description: string;
  /** Whether this emoji should be used by default */
  isDefault?: boolean | null;
}

export interface ErrorContext {
  /** File where error occurred */
  file?: string | null;
  /** Line number where error occurred */
  line?: number | null;
  /** Function/method where error occurred   */
  function?: string | null;
  /** Additional context data */
  data?: Document;
}

export interface ErrorDetails {
  /** Error type or class name */
  type: string;
  /** Detailed error message */
  message: string;
  /** Stack trace if available */
  stackTrace?: string | null;
  /** Error code if applicable */
  code?: string | null;
  /** Additional error context */
  context?: ErrorContext | null;
}

export interface FailedLogEntry {
  entry: LogEntry;
  reason: string;
}

export interface FileAdapterConfig {
  /** Path to log file */
  filePath: string;
  /** Enable colored output (usually false for files) */
  enableColors?: boolean | null;
  /** Enable emoji prefixes */
  enableEmojis?: boolean | null;
  /** Timestamp format */
  timestampFormat?: TimestampFormat | null;
  /** Minimum log level */
  logLevel?: LogLevel | null;
  /** Enable file rotation */
  rotationEnabled?: boolean | null;
  /** Maximum file size in MB before rotation */
  maxSizeMB?: number | null;
  /** Maximum number of rotated files to keep */
  maxFiles?: number | null;
}

export interface FrontendLogEntry {
  /** Base log entry fields */
  baseEntry: LogEntry;
  /** Browser/client information */
  clientInfo?: ClientInfo | null;
  /** User interaction context */
  userInteraction?: UserInteractionContext | null;
  /** Performance timing data */
  performanceTiming?: PerformanceTiming | null;
}

export interface GetLogEntryRequest {
  logId: LogId;
}

export interface GetLogEntryResponse {
  logEntry?: LogEntry | null;
}

export interface InfrastructureLogEntry {
  /** Base log entry fields */
  baseEntry: LogEntry;
  /** AWS resource context */
  awsContext?: AWSContext | null;
  /** Deployment context */
  deploymentContext?: DeploymentContext | null;
  /** Resource metrics */
  resourceMetrics?: ResourceMetrics | null;
}

export interface InfrastructureLoggerConfig {
  /** Stack name for infrastructure */
  stackName?: string | null;
  /** Deployment identifier */
  deploymentId?: string | null;
  /** Environment name */
  environment?: Environment | null;
  /** Enable emojis */
  emojis?: boolean | null;
  /** Additional context */
  context?: LoggingContext | null;
  /** Adapters to use */
  adapters?: AdapterNameList | null;
  /** Log level */
  level?: LogLevel | null;
}

export interface LocalStorageAdapterConfig {
  /** Storage key prefix */
  storageKey?: string | null;
  /** Enable emoji prefixes */
  enableEmojis?: boolean | null;
  /** Timestamp format */
  timestampFormat?: TimestampFormat | null;
  /** Minimum log level */
  logLevel?: LogLevel | null;
  /** Maximum entries to store */
  maxEntries?: number | null;
}

export interface LogEntry {
  /** Unique identifier for this log entry */
  logId?: LogId | null;
  /** Timestamp when the log entry was created */
  timestamp?: Timestamp | null;
  /** Severity level of the log entry */
  level?: LogLevel | null;
  /** Human-readable log message */
  message?: string | null;
  /** Service or component that generated this log entry */
  service?: ServiceName | null;
  /** Deployment environment (dev, staging, prod) */
  environment?: Environment | null;
  /** Pre-defined event type for consistent categorization */
  event?: LogEvent | null;
  /** Whether to include emoji prefix in log message output */
  includeEmoji?: boolean | null;
  /** Correlation context for distributed tracing */
  context?: LoggingContext | null;
  /** Additional structured data */
  metadata?: LogMetadata | null;
  /** Performance metrics associated with this log entry */
  metrics?: PerformanceMetrics | null;
  /** Error details if this is an error log entry */
  error?: ErrorDetails | null;
}

export interface LogMetadata {
  /** Key-value pairs for additional context */
  tags?: TagMap | null;
  /** Nested structured data */
  data?: Document;
  /** Component or module within the service */
  component?: string | null;
  /** Operation or function being logged */
  operation?: string | null;
  /** Version of the service/component */
  version?: string | null;
  /** Custom event mappings for extensible event system */
  customEventMappings?: CustomEventMap | null;
}

export interface LoggerConfig {
  /** Service name for the logger */
  service?: ServiceName | null;
  /** Environment name (dev, staging, prod) */
  environment?: Environment | null;
  /** Enable emoji prefixes in log messages */
  emojis?: boolean | null;
  /** Correlation context for distributed tracing */
  context?: LoggingContext | null;
  /** List of adapter names to use */
  adapters?: AdapterNameList | null;
  /** Minimum log level to output */
  level?: LogLevel | null;
}

export interface LoggerFactoryConfig {
  /** Default service name */
  defaultService?: ServiceName | null;
  /** Default environment name */
  defaultEnvironment?: Environment | null;
  /** Default emoji setting */
  defaultEmojis?: boolean | null;
  /** Default adapters to use */
  defaultAdapters?: AdapterNameList | null;
  /** Default log level */
  defaultLevel?: LogLevel | null;
}

export interface LoggingContext {
  /** Primary correlation identifier for request tracking */
  correlationId?: string | null;
  /** OpenTelemetry trace identifier   */
  traceId?: string | null;
  /** OpenTelemetry span identifier */
  spanId?: string | null;
  /** User context if applicable */
  userId?: UserId | null;
  /** Session context if applicable */
  sessionId?: SessionId | null;
  /** Request context if applicable   */
  requestId?: RequestId | null;
  /** Parent correlation ID for nested operations */
  parentCorrelationId?: string | null;
}

export interface MemoryInfo {
  /** Used heap size in bytes */
  usedJSHeapSize?: number | null;
  /** Total heap size in bytes */
  totalJSHeapSize?: number | null;
  /** Heap size limit in bytes */
  jsHeapSizeLimit?: number | null;
}

export interface ObservationContext {
  /** Session identifier for the observation */
  sessionId: string;
  /** Type of observation being processed */
  observationType?: string | null;
  /** Confidence score of the observation */
  confidence?: number | null;
  /** Processing mode (sync, async, batch) */
  processingMode?: string | null;
  /** Model version used for processing */
  modelVersion?: string | null;
  /** Number of entities extracted */
  entitiesCount?: number | null;
}

export interface PerformanceMetrics {
  /** Operation duration in milliseconds */
  durationMs?: number | null;
  /** Memory usage in bytes */
  memoryBytes?: number | null;
  /** CPU usage percentage */
  cpuPercent?: number | null;
  /** Custom performance counters */
  counters?: MetricsMap | null;
}

export interface PerformanceTiming {
  /** Page load time in milliseconds */
  pageLoadTime?: number | null;
  /** DOM content loaded time */
  domContentLoadedTime?: number | null;
  /** First contentful paint time */
  firstContentfulPaint?: number | null;
  /** Largest contentful paint time */
  largestContentfulPaint?: number | null;
  /** Cumulative layout shift score */
  cumulativeLayoutShift?: number | null;
  /** First input delay */
  firstInputDelay?: number | null;
  /** Memory usage information */
  memoryInfo?: MemoryInfo | null;
}

export interface QueryLogsRequest {
  /** Service name filter */
  service?: ServiceName | null;
  /** Environment filter   */
  environment?: Environment | null;
  /** Log level filter (minimum level) */
  minLevel?: LogLevel | null;
  /** Time range start */
  startTime?: Timestamp | null;
  /** Time range end */
  endTime?: Timestamp | null;
  /** Correlation ID filter */
  correlationId?: string | null;
  /** User ID filter */
  userId?: UserId | null;
  /** Event type filter */
  event?: LogEvent | null;
  /** Maximum results to return */
  limit?: number | null;
  /** Pagination token */
  nextToken?: string | null;
}

export interface QueryLogsResponse {
  logEntries: LogEntryList;
  nextToken?: string | null;
  totalCount: number;
}

export interface ResourceMetrics {
  /** Number of resources being created */
  resourcesCreated?: number | null;
  /** Number of resources being updated */
  resourcesUpdated?: number | null;
  /** Number of resources being deleted */
  resourcesDeleted?: number | null;
  /** Total resource count */
  totalResources?: number | null;
  /** Deployment duration in milliseconds */
  deploymentDurationMs?: number | null;
  /** Estimated cost impact */
  costImpact?: CostImpact | null;
}

export interface ServiceError {
  message: string;
  requestId: string;
  code?: string | null;
}

export interface StandardEmojiMappings {
  /** Predefined emoji mappings */
  mappings: EmojiMappingMap;
}

export interface ToolExecutionContext {
  /** Name of the tool being executed */
  toolName: string;
  /** Tool execution identifier */
  executionId?: string | null;
  /** Input parameters to the tool */
  inputParameters?: Document;
  /** Tool execution result */
  result?: Document;
  /** Execution duration in milliseconds */
  executionDurationMs?: number | null;
  /** Whether the tool execution was successful */
  success?: boolean | null;
}

export interface UserInteractionContext {
  /** Type of user interaction (click, scroll, input, etc.) */
  interactionType?: string | null;
  /** Element that triggered the interaction */
  targetElement?: string | null;
  /** Page or route where interaction occurred */
  page?: string | null;
  /** URL of the page */
  url?: string | null;
  /** Referrer URL */
  referrer?: string | null;
  /** Mouse/touch coordinates */
  coordinates?: CoordinateInfo | null;
  /** Additional interaction metadata */
  interactionData?: Document;
}

export interface ValidationError {
  message: string;
  field?: string | null;
  code?: string | null;
}

// Standardized emoji mappings - BREAKING CHANGE: emojis are now consistent across languages
export const DEFAULT_EMOJI_MAPPINGS: Record<
  string,
  { emoji: string; description: string; isDefault: boolean }
> = {
  SYSTEM_START: {
    emoji: '🚀',
    description: 'System startup or initialization events',
    isDefault: true,
  },
  SYSTEM_STOP: {
    emoji: '🛑',
    description: 'System shutdown or termination events',
    isDefault: true,
  },
  USER_AUTH: {
    emoji: '👤',
    description: 'User authentication events',
    isDefault: true,
  },
  USER_AUTHZ: {
    emoji: '🔐',
    description: 'Authorization and permission events',
    isDefault: true,
  },
  PROJECT_LIFECYCLE: {
    emoji: '📁',
    description: 'Project lifecycle events',
    isDefault: true,
  },
  DATABASE_OPERATION: {
    emoji: '💾',
    description: 'Database operations',
    isDefault: true,
  },
  API_REQUEST: {
    emoji: '🔄',
    description: 'API request/response events',
    isDefault: true,
  },
  PERFORMANCE_METRIC: {
    emoji: '⚡',
    description: 'Performance metrics and timing',
    isDefault: true,
  },
  ERROR_OCCURRED: {
    emoji: '🐛',
    description: 'Error conditions and exceptions',
    isDefault: true,
  },
  WARNING_ISSUED: {
    emoji: '⚠️',
    description: 'Warning conditions',
    isDefault: true,
  },
  CONFIG_CHANGE: {
    emoji: '🔧',
    description: 'Configuration changes',
    isDefault: true,
  },
  ANALYTICS_EVENT: {
    emoji: '📊',
    description: 'Analytics and tracking events',
    isDefault: true,
  },
  AGENT_PROCESSING: {
    emoji: '🤖',
    description: 'Agent processing events',
    isDefault: true,
  },
  CONVERSATION_EVENT: {
    emoji: '💬',
    description: 'Conversation and interaction events',
    isDefault: true,
  },
  ASSET_PROCESSING: {
    emoji: '📸',
    description: 'Asset upload and processing',
    isDefault: true,
  },
  INSPIRATION_EVENT: {
    emoji: '🎨',
    description: 'Inspiration capture events',
    isDefault: true,
  },
  INFRASTRUCTURE_DEPLOY: {
    emoji: '🏗️',
    description: 'Infrastructure deployment events',
    isDefault: true,
  },
  BUSINESS_METRIC: {
    emoji: '📈',
    description: 'Business metric events',
    isDefault: true,
  },
  SEARCH_OPERATION: {
    emoji: '🔍',
    description: 'Search and discovery events',
    isDefault: true,
  },
  BACKGROUND_JOB: {
    emoji: '⚙️',
    description: 'Background job processing',
    isDefault: true,
  },
  NOTIFICATION_SENT: {
    emoji: '📧',
    description: 'Notification events',
    isDefault: true,
  },
  SECURITY_EVENT: {
    emoji: '🔒',
    description: 'Security-related events',
    isDefault: true,
  },
  SCHEDULED_TASK: {
    emoji: '⏰',
    description: 'Scheduled task execution',
    isDefault: true,
  },
  EXTERNAL_SERVICE: {
    emoji: '🌐',
    description: 'External service integration',
    isDefault: true,
  },
  AUDIT_TRAIL: {
    emoji: '📋',
    description: 'Audit trail events',
    isDefault: true,
  },
};

// Type-safe emoji mappings using LogEvent enum
export const TYPED_EMOJI_MAPPINGS: Record<
  LogEvent,
  { emoji: string; description: string; isDefault: boolean }
> = {
  [LogEvent.SYSTEM_START]: {
    emoji: '🚀',
    description: 'System startup or initialization events',
    isDefault: true,
  },
  [LogEvent.SYSTEM_STOP]: {
    emoji: '🛑',
    description: 'System shutdown or termination events',
    isDefault: true,
  },
  [LogEvent.USER_AUTH]: {
    emoji: '👤',
    description: 'User authentication events',
    isDefault: true,
  },
  [LogEvent.USER_AUTHZ]: {
    emoji: '🔐',
    description: 'Authorization and permission events',
    isDefault: true,
  },
  [LogEvent.PROJECT_LIFECYCLE]: {
    emoji: '📁',
    description: 'Project lifecycle events',
    isDefault: true,
  },
  [LogEvent.DATABASE_OPERATION]: {
    emoji: '💾',
    description: 'Database operations',
    isDefault: true,
  },
  [LogEvent.API_REQUEST]: {
    emoji: '🔄',
    description: 'API request/response events',
    isDefault: true,
  },
  [LogEvent.PERFORMANCE_METRIC]: {
    emoji: '⚡',
    description: 'Performance metrics and timing',
    isDefault: true,
  },
  [LogEvent.ERROR_OCCURRED]: {
    emoji: '🐛',
    description: 'Error conditions and exceptions',
    isDefault: true,
  },
  [LogEvent.WARNING_ISSUED]: {
    emoji: '⚠️',
    description: 'Warning conditions',
    isDefault: true,
  },
  [LogEvent.CONFIG_CHANGE]: {
    emoji: '🔧',
    description: 'Configuration changes',
    isDefault: true,
  },
  [LogEvent.ANALYTICS_EVENT]: {
    emoji: '📊',
    description: 'Analytics and tracking events',
    isDefault: true,
  },
  [LogEvent.AGENT_PROCESSING]: {
    emoji: '🤖',
    description: 'Agent processing events',
    isDefault: true,
  },
  [LogEvent.CONVERSATION_EVENT]: {
    emoji: '💬',
    description: 'Conversation and interaction events',
    isDefault: true,
  },
  [LogEvent.ASSET_PROCESSING]: {
    emoji: '📸',
    description: 'Asset upload and processing',
    isDefault: true,
  },
  [LogEvent.INSPIRATION_EVENT]: {
    emoji: '🎨',
    description: 'Inspiration capture events',
    isDefault: true,
  },
  [LogEvent.INFRASTRUCTURE_DEPLOY]: {
    emoji: '🏗️',
    description: 'Infrastructure deployment events',
    isDefault: true,
  },
  [LogEvent.BUSINESS_METRIC]: {
    emoji: '📈',
    description: 'Business metric events',
    isDefault: true,
  },
  [LogEvent.SEARCH_OPERATION]: {
    emoji: '🔍',
    description: 'Search and discovery events',
    isDefault: true,
  },
  [LogEvent.BACKGROUND_JOB]: {
    emoji: '⚙️',
    description: 'Background job processing',
    isDefault: true,
  },
  [LogEvent.NOTIFICATION_SENT]: {
    emoji: '📧',
    description: 'Notification events',
    isDefault: true,
  },
  [LogEvent.SECURITY_EVENT]: {
    emoji: '🔒',
    description: 'Security-related events',
    isDefault: true,
  },
  [LogEvent.SCHEDULED_TASK]: {
    emoji: '⏰',
    description: 'Scheduled task execution',
    isDefault: true,
  },
  [LogEvent.EXTERNAL_SERVICE]: {
    emoji: '🌐',
    description: 'External service integration',
    isDefault: true,
  },
  [LogEvent.AUDIT_TRAIL]: {
    emoji: '📋',
    description: 'Audit trail events',
    isDefault: true,
  },
};
