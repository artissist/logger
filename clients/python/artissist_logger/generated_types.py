"""
Generated Python types from Smithy models
This file is automatically generated. Do not edit directly.
"""

from __future__ import annotations

from dataclasses import dataclass
from enum import Enum
from typing import Any, Dict, List, Optional, Union

# Document type for arbitrary JSON data
Document = Any


class AdapterName(Enum):
    """Supported adapter types"""

    # Console/stdout adapter
    CONSOLE = "CONSOLE"
    # File system adapter
    FILE = "FILE"
    # Browser console adapter
    BROWSER = "BROWSER"
    # Browser localStorage adapter
    LOCAL_STORAGE = "LOCAL_STORAGE"


class LogEvent(Enum):
    """Pre-defined event types with emoji mappings"""

    # System startup or initialization events
    SYSTEM_START = "SYSTEM_START"
    # System shutdown or termination events
    SYSTEM_STOP = "SYSTEM_STOP"
    # User authentication events
    USER_AUTH = "USER_AUTH"
    # Authorization and permission events
    USER_AUTHZ = "USER_AUTHZ"
    # Project lifecycle events
    PROJECT_LIFECYCLE = "PROJECT_LIFECYCLE"
    # Database operations
    DATABASE_OPERATION = "DATABASE_OPERATION"
    # API request/response events
    API_REQUEST = "API_REQUEST"
    # Performance metrics and timing
    PERFORMANCE_METRIC = "PERFORMANCE_METRIC"
    # Error conditions and exceptions
    ERROR_OCCURRED = "ERROR_OCCURRED"
    # Warning conditions
    WARNING_ISSUED = "WARNING_ISSUED"
    # Configuration changes
    CONFIG_CHANGE = "CONFIG_CHANGE"
    # Analytics and tracking events
    ANALYTICS_EVENT = "ANALYTICS_EVENT"
    # Agent processing events
    AGENT_PROCESSING = "AGENT_PROCESSING"
    # Conversation and interaction events
    CONVERSATION_EVENT = "CONVERSATION_EVENT"
    # Asset upload and processing
    ASSET_PROCESSING = "ASSET_PROCESSING"
    # Inspiration capture events
    INSPIRATION_EVENT = "INSPIRATION_EVENT"
    # Infrastructure deployment events
    INFRASTRUCTURE_DEPLOY = "INFRASTRUCTURE_DEPLOY"
    # Business metric events
    BUSINESS_METRIC = "BUSINESS_METRIC"
    # Search and discovery events
    SEARCH_OPERATION = "SEARCH_OPERATION"
    # Background job processing
    BACKGROUND_JOB = "BACKGROUND_JOB"
    # Notification events
    NOTIFICATION_SENT = "NOTIFICATION_SENT"
    # Security-related events
    SECURITY_EVENT = "SECURITY_EVENT"
    # Scheduled task execution
    SCHEDULED_TASK = "SCHEDULED_TASK"
    # External service integration
    EXTERNAL_SERVICE = "EXTERNAL_SERVICE"
    # Audit trail events
    AUDIT_TRAIL = "AUDIT_TRAIL"


class LogLevel(Enum):
    """Enumeration of supported log levels"""

    # Detailed tracing information for debugging
    TRACE = "TRACE"
    # General debugging information
    DEBUG = "DEBUG"
    # Informational messages during normal operations
    INFO = "INFO"
    # Warning conditions that should be addressed
    WARN = "WARN"
    # Error conditions that require attention
    ERROR = "ERROR"
    # Critical failures that may cause system shutdown
    FATAL = "FATAL"


class TimestampFormat(Enum):
    """Timestamp formatting options"""

    # ISO 8601 format (2024-01-01T12:00:00.000Z)
    ISO = "ISO"
    # Short format (12:00:00)
    SHORT = "SHORT"
    # Relative format (2m ago)
    RELATIVE = "RELATIVE"
    # No timestamp
    NONE = "NONE"


ServiceName = str

Environment = str

LogId = str

UserId = str

SessionId = str

RequestId = str

Timestamp = str

LogEntryList = List["LogEntry"]

LogIdList = List["LogId"]

FailedLogEntryList = List["FailedLogEntry"]

AdapterNameList = List["AdapterName"]

TagMap = Dict[str, str]

MetricsMap = Dict[str, float]

CustomEventMap = Dict[str, "EmojiMapping"]

EmojiMappingMap = Dict[str, "EmojiMapping"]


@dataclass
class AWSContext:
    """AWS-specific context for infrastructure logging"""

    # AWS region
    region: Optional[str] = None
    # AWS account ID
    account_id: Optional[str] = None
    # Resource ARN if applicable
    resource_arn: Optional[str] = None
    # CloudFormation stack name
    stack_name: Optional[str] = None
    # Lambda function name
    function_name: Optional[str] = None
    # Lambda request ID
    lambda_request_id: Optional[str] = None
    # EC2 instance ID
    instance_id: Optional[str] = None
    # ECS cluster and task information
    ecs_info: Optional["ECSInfo"] = None


@dataclass
class AgentLogEntry:
    """Extension for agent-specific logging"""

    # Base log entry fields
    base_entry: Optional["LogEntry"] = None
    # Agent-specific identifier
    agent_id: Optional[str] = None
    # Agent type (observation, conversation, etc.)
    agent_type: Optional[str] = None
    # Observation context if applicable
    observation_context: Optional["ObservationContext"] = None
    # Tool execution context
    tool_context: Optional["ToolExecutionContext"] = None


@dataclass
class AgentLoggerConfig:
    """Configuration for agent-specific loggers"""

    # Agent identifier
    agent_id: Optional[str] = None
    # Agent type (observation, conversation, etc.)
    agent_type: Optional[str] = None
    # Environment name
    environment: Optional["Environment"] = None
    # Enable emojis
    emojis: Optional[bool] = None
    # Additional context
    context: Optional["LoggingContext"] = None
    # Adapters to use
    adapters: Optional["AdapterNameList"] = None
    # Log level
    level: Optional["LogLevel"] = None


@dataclass
class BrowserAdapterConfig:
    """Browser adapter configuration"""

    # Enable colored console output
    enable_colors: Optional[bool] = None
    # Enable emoji prefixes
    enable_emojis: Optional[bool] = None
    # Timestamp format
    timestamp_format: Optional["TimestampFormat"] = None
    # Minimum log level
    log_level: Optional["LogLevel"] = None
    # Use console.error for error levels
    use_console_error: Optional[bool] = None


@dataclass
class ClientInfo:
    """Browser and client environment information"""

    # User agent string
    user_agent: Optional[str] = None
    # Browser name and version
    browser: Optional[str] = None
    # Operating system information
    os: Optional[str] = None
    # Screen resolution
    screen_resolution: Optional[str] = None
    # Viewport dimensions
    viewport_size: Optional[str] = None
    # Device type (mobile, tablet, desktop)
    device_type: Optional[str] = None
    # Network connection type
    connection_type: Optional[str] = None
    # Timezone of the client
    timezone: Optional[str] = None


@dataclass
class ConsoleAdapterConfig:
    """Console adapter configuration"""

    # Enable colored output
    enable_colors: Optional[bool] = None
    # Enable emoji prefixes
    enable_emojis: Optional[bool] = None
    # Timestamp format
    timestamp_format: Optional["TimestampFormat"] = None
    # Minimum log level
    log_level: Optional["LogLevel"] = None
    # Use stderr instead of stdout for output
    use_stderr: Optional[bool] = None


@dataclass
class CoordinateInfo:
    """Coordinate information for user interactions"""

    # X coordinate
    x: Optional[int] = None
    # Y coordinate
    y: Optional[int] = None
    # Element-relative X coordinate
    relative_x: Optional[int] = None
    # Element-relative Y coordinate
    relative_y: Optional[int] = None


@dataclass
class CostImpact:
    """Cost impact information for infrastructure changes"""

    # Estimated monthly cost change in USD
    monthly_cost_change_usd: Optional[float] = None
    # Currency code
    currency: Optional[str] = None
    # Cost calculation confidence
    confidence: Optional[float] = None
    # Breakdown by resource type
    resource_cost_breakdown: Optional["Document"] = None


@dataclass
class CreateBatchLogEntriesRequest:
    """Request structure for batch log entry creation"""

    log_entries: Optional["LogEntryList"] = None


@dataclass
class CreateBatchLogEntriesResponse:
    """Response structure for batch log entry creation"""

    processed_count: Optional[int] = None
    successful_ids: Optional["LogIdList"] = None
    failed_entries: Optional["FailedLogEntryList"] = None


@dataclass
class CreateLogEntryRequest:
    """Request/Response Structures
    Request structure for creating a single log entry"""

    log_entry: Optional["LogEntry"] = None


@dataclass
class CreateLogEntryResponse:
    """Response structure for log entry creation"""

    log_id: Optional["LogId"] = None
    timestamp: Optional["Timestamp"] = None
    status: Optional[str] = None


@dataclass
class DefaultEmojiMappings:
    """Default emoji mappings for all log events"""

    # Mapping from log events to emoji configurations
    mappings: Optional["EmojiMappingMap"] = None


@dataclass
class DeploymentContext:
    """Deployment context for infrastructure operations"""

    # Deployment identifier
    deployment_id: Optional[str] = None
    # Deployment stage (plan, apply, destroy)
    deployment_stage: Optional[str] = None
    # Infrastructure as code tool (CDK, Terraform, etc.)
    iac_tool: Optional[str] = None
    # Tool version
    tool_version: Optional[str] = None
    # Target environment
    target_environment: Optional[str] = None
    # Deployment trigger (manual, automated, scheduled)
    trigger: Optional[str] = None
    # Git commit hash if applicable
    commit_hash: Optional[str] = None
    # Git branch name
    branch: Optional[str] = None


@dataclass
class ECSInfo:
    """ECS-specific information"""

    # ECS cluster name
    cluster_name: Optional[str] = None
    # ECS task ARN
    task_arn: Optional[str] = None
    # ECS service name
    service_name: Optional[str] = None
    # ECS task definition family
    task_definition_family: Optional[str] = None
    # ECS task definition revision
    task_definition_revision: Optional[str] = None


@dataclass
class EmojiMapping:
    """Emoji mapping configuration for events"""

    # Unicode emoji character
    emoji: Optional[str] = None
    # Human-readable description of the event
    description: Optional[str] = None
    # Whether this emoji should be used by default
    is_default: Optional[bool] = None


@dataclass
class ErrorContext:
    """Error context with file and location information"""

    # File where error occurred
    file: Optional[str] = None
    # Line number where error occurred
    line: Optional[int] = None
    # Function/method where error occurred
    function: Optional[str] = None
    # Additional context data
    data: Optional["Document"] = None


@dataclass
class ErrorDetails:
    """Error details for error-level log entries"""

    # Error type or class name
    type: Optional[str] = None
    # Detailed error message
    message: Optional[str] = None
    # Stack trace if available
    stack_trace: Optional[str] = None
    # Error code if applicable
    code: Optional[str] = None
    # Additional error context
    context: Optional["ErrorContext"] = None


@dataclass
class FailedLogEntry:
    """Failed log entry for batch operations"""

    entry: Optional["LogEntry"] = None
    reason: Optional[str] = None


@dataclass
class FileAdapterConfig:
    """File adapter configuration"""

    # Path to log file
    file_path: Optional[str] = None
    # Enable colored output (usually false for files)
    enable_colors: Optional[bool] = None
    # Enable emoji prefixes
    enable_emojis: Optional[bool] = None
    # Timestamp format
    timestamp_format: Optional["TimestampFormat"] = None
    # Minimum log level
    log_level: Optional["LogLevel"] = None
    # Enable file rotation
    rotation_enabled: Optional[bool] = None
    # Maximum file size in MB before rotation
    max_size_mb: Optional[int] = None
    # Maximum number of rotated files to keep
    max_files: Optional[int] = None


@dataclass
class FrontendLogEntry:
    """Extension for frontend-specific logging"""

    # Base log entry fields
    base_entry: Optional["LogEntry"] = None
    # Browser/client information
    client_info: Optional["ClientInfo"] = None
    # User interaction context
    user_interaction: Optional["UserInteractionContext"] = None
    # Performance timing data
    performance_timing: Optional["PerformanceTiming"] = None


@dataclass
class GetLogEntryRequest:
    """Request structure for getting a single log entry"""

    log_id: Optional["LogId"] = None


@dataclass
class GetLogEntryResponse:
    """Response structure for getting a single log entry"""

    log_entry: Optional["LogEntry"] = None


@dataclass
class InfrastructureLogEntry:
    """Extension for infrastructure logging"""

    # Base log entry fields
    base_entry: Optional["LogEntry"] = None
    # AWS resource context
    aws_context: Optional["AWSContext"] = None
    # Deployment context
    deployment_context: Optional["DeploymentContext"] = None
    # Resource metrics
    resource_metrics: Optional["ResourceMetrics"] = None


@dataclass
class InfrastructureLoggerConfig:
    """Configuration for infrastructure loggers"""

    # Stack name for infrastructure
    stack_name: Optional[str] = None
    # Deployment identifier
    deployment_id: Optional[str] = None
    # Environment name
    environment: Optional["Environment"] = None
    # Enable emojis
    emojis: Optional[bool] = None
    # Additional context
    context: Optional["LoggingContext"] = None
    # Adapters to use
    adapters: Optional["AdapterNameList"] = None
    # Log level
    level: Optional["LogLevel"] = None


@dataclass
class LocalStorageAdapterConfig:
    """LocalStorage adapter configuration"""

    # Storage key prefix
    storage_key: Optional[str] = None
    # Enable emoji prefixes
    enable_emojis: Optional[bool] = None
    # Timestamp format
    timestamp_format: Optional["TimestampFormat"] = None
    # Minimum log level
    log_level: Optional["LogLevel"] = None
    # Maximum entries to store
    max_entries: Optional[int] = None


@dataclass
class LogEntry:
    """Primary log entry structure"""

    # Unique identifier for this log entry
    log_id: Optional["LogId"] = None
    # Timestamp when the log entry was created
    timestamp: Optional["Timestamp"] = None
    # Severity level of the log entry
    level: Optional["LogLevel"] = None
    # Human-readable log message
    message: Optional[str] = None
    # Service or component that generated this log entry
    service: Optional["ServiceName"] = None
    # Deployment environment (dev, staging, prod)
    environment: Optional["Environment"] = None
    # Pre-defined event type for consistent categorization
    event: Optional["LogEvent"] = None
    # Whether to include emoji prefix in log message output
    include_emoji: Optional[bool] = None
    # Correlation context for distributed tracing
    context: Optional["LoggingContext"] = None
    # Additional structured data
    metadata: Optional["LogMetadata"] = None
    # Performance metrics associated with this log entry
    metrics: Optional["PerformanceMetrics"] = None
    # Error details if this is an error log entry
    error: Optional["ErrorDetails"] = None


@dataclass
class LogMetadata:
    """Flexible metadata container for additional log data"""

    # Key-value pairs for additional context
    tags: Optional["TagMap"] = None
    # Nested structured data
    data: Optional["Document"] = None
    # Component or module within the service
    component: Optional[str] = None
    # Operation or function being logged
    operation: Optional[str] = None
    # Version of the service/component
    version: Optional[str] = None
    # Custom event mappings for extensible event system
    custom_event_mappings: Optional["CustomEventMap"] = None


@dataclass
class LoggerConfig:
    """Logger configuration structure"""

    # Service name for the logger
    service: Optional["ServiceName"] = None
    # Environment name (dev, staging, prod)
    environment: Optional["Environment"] = None
    # Enable emoji prefixes in log messages
    emojis: Optional[bool] = None
    # Correlation context for distributed tracing
    context: Optional["LoggingContext"] = None
    # List of adapter names to use
    adapters: Optional["AdapterNameList"] = None
    # Minimum log level to output
    level: Optional["LogLevel"] = None


@dataclass
class LoggerFactoryConfig:
    """Factory configuration for creating loggers"""

    # Default service name
    default_service: Optional["ServiceName"] = None
    # Default environment name
    default_environment: Optional["Environment"] = None
    # Default emoji setting
    default_emojis: Optional[bool] = None
    # Default adapters to use
    default_adapters: Optional["AdapterNameList"] = None
    # Default log level
    default_level: Optional["LogLevel"] = None


@dataclass
class LoggingContext:
    """Context information for distributed tracing and correlation"""

    # Primary correlation identifier for request tracking
    correlation_id: Optional[str] = None
    # OpenTelemetry trace identifier
    trace_id: Optional[str] = None
    # OpenTelemetry span identifier
    span_id: Optional[str] = None
    # User context if applicable
    user_id: Optional["UserId"] = None
    # Session context if applicable
    session_id: Optional["SessionId"] = None
    # Request context if applicable
    request_id: Optional["RequestId"] = None
    # Parent correlation ID for nested operations
    parent_correlation_id: Optional[str] = None


@dataclass
class MemoryInfo:
    """Memory usage information from the browser"""

    # Used heap size in bytes
    used_js_heap_size: Optional[int] = None
    # Total heap size in bytes
    total_js_heap_size: Optional[int] = None
    # Heap size limit in bytes
    js_heap_size_limit: Optional[int] = None


@dataclass
class ObservationContext:
    """Context for observation processing in agents"""

    # Session identifier for the observation
    session_id: Optional[str] = None
    # Type of observation being processed
    observation_type: Optional[str] = None
    # Confidence score of the observation
    confidence: Optional[float] = None
    # Processing mode (sync, async, batch)
    processing_mode: Optional[str] = None
    # Model version used for processing
    model_version: Optional[str] = None
    # Number of entities extracted
    entities_count: Optional[int] = None


@dataclass
class PerformanceMetrics:
    """Performance metrics for operations"""

    # Operation duration in milliseconds
    duration_ms: Optional[int] = None
    # Memory usage in bytes
    memory_bytes: Optional[int] = None
    # CPU usage percentage
    cpu_percent: Optional[float] = None
    # Custom performance counters
    counters: Optional["MetricsMap"] = None


@dataclass
class PerformanceTiming:
    """Browser performance timing information"""

    # Page load time in milliseconds
    page_load_time: Optional[int] = None
    # DOM content loaded time
    dom_content_loaded_time: Optional[int] = None
    # First contentful paint time
    first_contentful_paint: Optional[int] = None
    # Largest contentful paint time
    largest_contentful_paint: Optional[int] = None
    # Cumulative layout shift score
    cumulative_layout_shift: Optional[float] = None
    # First input delay
    first_input_delay: Optional[int] = None
    # Memory usage information
    memory_info: Optional["MemoryInfo"] = None


@dataclass
class QueryLogsRequest:
    """Request structure for querying logs"""

    # Service name filter
    service: Optional["ServiceName"] = None
    # Environment filter
    environment: Optional["Environment"] = None
    # Log level filter (minimum level)
    min_level: Optional["LogLevel"] = None
    # Time range start
    start_time: Optional["Timestamp"] = None
    # Time range end
    end_time: Optional["Timestamp"] = None
    # Correlation ID filter
    correlation_id: Optional[str] = None
    # User ID filter
    user_id: Optional["UserId"] = None
    # Event type filter
    event: Optional["LogEvent"] = None
    # Maximum results to return
    limit: Optional[int] = None
    # Pagination token
    next_token: Optional[str] = None


@dataclass
class QueryLogsResponse:
    """Response structure for log queries"""

    log_entries: Optional["LogEntryList"] = None
    next_token: Optional[str] = None
    total_count: Optional[int] = None


@dataclass
class ResourceMetrics:
    """Resource metrics for infrastructure operations"""

    # Number of resources being created
    resources_created: Optional[int] = None
    # Number of resources being updated
    resources_updated: Optional[int] = None
    # Number of resources being deleted
    resources_deleted: Optional[int] = None
    # Total resource count
    total_resources: Optional[int] = None
    # Deployment duration in milliseconds
    deployment_duration_ms: Optional[int] = None
    # Estimated cost impact
    cost_impact: Optional["CostImpact"] = None


@dataclass
class ServiceError:
    """Server error for service failures"""

    message: Optional[str] = None
    request_id: Optional[str] = None
    code: Optional[str] = None


@dataclass
class StandardEmojiMappings:
    """Standard emoji mappings for log events"""

    # Predefined emoji mappings
    mappings: Optional["EmojiMappingMap"] = None


@dataclass
class ToolExecutionContext:
    """Context for tool execution within agents"""

    # Name of the tool being executed
    tool_name: Optional[str] = None
    # Tool execution identifier
    execution_id: Optional[str] = None
    # Input parameters to the tool
    input_parameters: Optional["Document"] = None
    # Tool execution result
    result: Optional["Document"] = None
    # Execution duration in milliseconds
    execution_duration_ms: Optional[int] = None
    # Whether the tool execution was successful
    success: Optional[bool] = None


@dataclass
class UserInteractionContext:
    """User interaction context for frontend events"""

    # Type of user interaction (click, scroll, input, etc.)
    interaction_type: Optional[str] = None
    # Element that triggered the interaction
    target_element: Optional[str] = None
    # Page or route where interaction occurred
    page: Optional[str] = None
    # URL of the page
    url: Optional[str] = None
    # Referrer URL
    referrer: Optional[str] = None
    # Mouse/touch coordinates
    coordinates: Optional["CoordinateInfo"] = None
    # Additional interaction metadata
    interaction_data: Optional["Document"] = None


@dataclass
class ValidationError:
    """Error definitions
    Client error for validation failures"""

    message: Optional[str] = None
    field: Optional[str] = None
    code: Optional[str] = None


# Standardized emoji mappings - BREAKING CHANGE:
# emojis are now consistent across languages
DEFAULT_EMOJI_MAPPINGS: Dict[str, Dict[str, Union[str, bool]]] = {
    "SYSTEM_START": {
        "emoji": "🚀",
        "description": "System startup or initialization events",
        "is_default": True,
    },
    "SYSTEM_STOP": {
        "emoji": "🛑",
        "description": "System shutdown or termination events",
        "is_default": True,
    },
    "USER_AUTH": {
        "emoji": "👤",
        "description": "User authentication events",
        "is_default": True,
    },
    "USER_AUTHZ": {
        "emoji": "🔐",
        "description": "Authorization and permission events",
        "is_default": True,
    },
    "PROJECT_LIFECYCLE": {
        "emoji": "📁",
        "description": "Project lifecycle events",
        "is_default": True,
    },
    "DATABASE_OPERATION": {
        "emoji": "💾",
        "description": "Database operations",
        "is_default": True,
    },
    "API_REQUEST": {
        "emoji": "🔄",
        "description": "API request/response events",
        "is_default": True,
    },
    "PERFORMANCE_METRIC": {
        "emoji": "⚡",
        "description": "Performance metrics and timing",
        "is_default": True,
    },
    "ERROR_OCCURRED": {
        "emoji": "🐛",
        "description": "Error conditions and exceptions",
        "is_default": True,
    },
    "WARNING_ISSUED": {
        "emoji": "⚠️",
        "description": "Warning conditions",
        "is_default": True,
    },
    "CONFIG_CHANGE": {
        "emoji": "🔧",
        "description": "Configuration changes",
        "is_default": True,
    },
    "ANALYTICS_EVENT": {
        "emoji": "📊",
        "description": "Analytics and tracking events",
        "is_default": True,
    },
    "AGENT_PROCESSING": {
        "emoji": "🤖",
        "description": "Agent processing events",
        "is_default": True,
    },
    "CONVERSATION_EVENT": {
        "emoji": "💬",
        "description": "Conversation and interaction events",
        "is_default": True,
    },
    "ASSET_PROCESSING": {
        "emoji": "📸",
        "description": "Asset upload and processing",
        "is_default": True,
    },
    "INSPIRATION_EVENT": {
        "emoji": "🎨",
        "description": "Inspiration capture events",
        "is_default": True,
    },
    "INFRASTRUCTURE_DEPLOY": {
        "emoji": "🏗️",
        "description": "Infrastructure deployment events",
        "is_default": True,
    },
    "BUSINESS_METRIC": {
        "emoji": "📈",
        "description": "Business metric events",
        "is_default": True,
    },
    "SEARCH_OPERATION": {
        "emoji": "🔍",
        "description": "Search and discovery events",
        "is_default": True,
    },
    "BACKGROUND_JOB": {
        "emoji": "⚙️",
        "description": "Background job processing",
        "is_default": True,
    },
    "NOTIFICATION_SENT": {
        "emoji": "📧",
        "description": "Notification events",
        "is_default": True,
    },
    "SECURITY_EVENT": {
        "emoji": "🔒",
        "description": "Security-related events",
        "is_default": True,
    },
    "SCHEDULED_TASK": {
        "emoji": "⏰",
        "description": "Scheduled task execution",
        "is_default": True,
    },
    "EXTERNAL_SERVICE": {
        "emoji": "🌐",
        "description": "External service integration",
        "is_default": True,
    },
    "AUDIT_TRAIL": {
        "emoji": "📋",
        "description": "Audit trail events",
        "is_default": True,
    },
}

# Type-safe emoji mappings using LogEvent enum
TYPED_EMOJI_MAPPINGS: Dict[LogEvent, Dict[str, Union[str, bool]]] = {
    LogEvent.SYSTEM_START: {
        "emoji": "🚀",
        "description": "System startup or initialization events",
        "is_default": True,
    },
    LogEvent.SYSTEM_STOP: {
        "emoji": "🛑",
        "description": "System shutdown or termination events",
        "is_default": True,
    },
    LogEvent.USER_AUTH: {
        "emoji": "👤",
        "description": "User authentication events",
        "is_default": True,
    },
    LogEvent.USER_AUTHZ: {
        "emoji": "🔐",
        "description": "Authorization and permission events",
        "is_default": True,
    },
    LogEvent.PROJECT_LIFECYCLE: {
        "emoji": "📁",
        "description": "Project lifecycle events",
        "is_default": True,
    },
    LogEvent.DATABASE_OPERATION: {
        "emoji": "💾",
        "description": "Database operations",
        "is_default": True,
    },
    LogEvent.API_REQUEST: {
        "emoji": "🔄",
        "description": "API request/response events",
        "is_default": True,
    },
    LogEvent.PERFORMANCE_METRIC: {
        "emoji": "⚡",
        "description": "Performance metrics and timing",
        "is_default": True,
    },
    LogEvent.ERROR_OCCURRED: {
        "emoji": "🐛",
        "description": "Error conditions and exceptions",
        "is_default": True,
    },
    LogEvent.WARNING_ISSUED: {
        "emoji": "⚠️",
        "description": "Warning conditions",
        "is_default": True,
    },
    LogEvent.CONFIG_CHANGE: {
        "emoji": "🔧",
        "description": "Configuration changes",
        "is_default": True,
    },
    LogEvent.ANALYTICS_EVENT: {
        "emoji": "📊",
        "description": "Analytics and tracking events",
        "is_default": True,
    },
    LogEvent.AGENT_PROCESSING: {
        "emoji": "🤖",
        "description": "Agent processing events",
        "is_default": True,
    },
    LogEvent.CONVERSATION_EVENT: {
        "emoji": "💬",
        "description": "Conversation and interaction events",
        "is_default": True,
    },
    LogEvent.ASSET_PROCESSING: {
        "emoji": "📸",
        "description": "Asset upload and processing",
        "is_default": True,
    },
    LogEvent.INSPIRATION_EVENT: {
        "emoji": "🎨",
        "description": "Inspiration capture events",
        "is_default": True,
    },
    LogEvent.INFRASTRUCTURE_DEPLOY: {
        "emoji": "🏗️",
        "description": "Infrastructure deployment events",
        "is_default": True,
    },
    LogEvent.BUSINESS_METRIC: {
        "emoji": "📈",
        "description": "Business metric events",
        "is_default": True,
    },
    LogEvent.SEARCH_OPERATION: {
        "emoji": "🔍",
        "description": "Search and discovery events",
        "is_default": True,
    },
    LogEvent.BACKGROUND_JOB: {
        "emoji": "⚙️",
        "description": "Background job processing",
        "is_default": True,
    },
    LogEvent.NOTIFICATION_SENT: {
        "emoji": "📧",
        "description": "Notification events",
        "is_default": True,
    },
    LogEvent.SECURITY_EVENT: {
        "emoji": "🔒",
        "description": "Security-related events",
        "is_default": True,
    },
    LogEvent.SCHEDULED_TASK: {
        "emoji": "⏰",
        "description": "Scheduled task execution",
        "is_default": True,
    },
    LogEvent.EXTERNAL_SERVICE: {
        "emoji": "🌐",
        "description": "External service integration",
        "is_default": True,
    },
    LogEvent.AUDIT_TRAIL: {
        "emoji": "📋",
        "description": "Audit trail events",
        "is_default": True,
    },
}
